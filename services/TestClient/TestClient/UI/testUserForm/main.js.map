{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n// declare var CamSDK: any;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'testUserForm';\n\n  @ViewChild('camundaform', {static: true}) myForm: ElementRef;\n\n  constructor(private activatedRoute : ActivatedRoute) {\n    // this.route.params.subscribe(res => console.log(res.id));\n  }\n\n  ngOnInit(): void {\n\n    this.activatedRoute.queryParams.subscribe(params => {\n      var taskId = params['taskId'];\n      if (taskId) {\n        console.log(`Task Id ==> ${taskId}`);\n        // this.setupCamundaForm(taskId);\n      }\n    });\n\n    // const url: Observable<Params> = this.activatedRoute.queryParams;\n    // url.subscribe( x => console.log(x));\n    // console.log(`url : ${this.activatedRoute.url}`);\n  }\n\n  setupCamundaForm() {\n    // var camClient = new CamSDK.Client({\n    //   mock: false,\n    //   apiUri: 'http://camunda.danny-thibaudeau.ca/engine-rest'\n    // });\n\n    // var taskService = new camClient.resource('task');\n\n    // taskService.form(taskId, function(err, taskFormInfo) {\n    //   var url = taskFormInfo.key.replace('embedded:app:', taskFormInfo.contextPath + '/');\n    //   var form = new CamSDK.Form(\n    //     {\n    //       client: camClient,\n    //       taskId,\n    //       formElement: this.myForm.nativeElement,\n    //       done: function(error, camFormInstance) {\n    //         console.log('done function called');\n    //       }\n    //     });\n    //   });\n  }\n}\n","<form #camundaform role=\"form\" name=\"testForm\">\n  <div class=\"form-group\">\n    <label for=\"customerId-field\">Customer ID</label>\n    <input required\n           cam-variable-name=\"customerId\"\n           cam-variable-type=\"String\"\n           class=\"form-control\" />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"amount-field\">Amount</label>\n    <input cam-variable-name=\"amount\"\n           cam-variable-type=\"Double\"\n           class=\"form-control\" />\n  </div>\n</form>\n<picture>\n  <img src=\"../assets/testimage.png\">\n</picture>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}